Enum facility_type {
  house
  sauna
  greenhouse
  woodshed
  garage
  cellar
  pool
  grill
}

Enum alert_state {
  open
  ack
  closed
}

Enum severity_level {
  info
  warning
  critical
}

Enum actuator_type {
  binary
  level
  setpoint
}

Enum command_status {
  free
  inprogress
}

Enum user_role {
  admin
  operator
  viewer
}

Table users {
  id          integer      [pk]
  username    varchar      [not null, unique]
  role        user_role    [not null, default: 'viewer']
}

Table units {
  id    integer     [pk]
  code  varchar(32) [not null, unique]
  title varchar(120) [not null]
}

Table facilities {
  id         integer        [pk]
  name       varchar(120)   [not null]
  type       facility_type  [not null]
  created_at timestamptz    [not null, default: `now()`]
}

Table sensors {
  id           int          [pk]
  user_id      int          [not null]
  facility_id  int          [not null]
  name         varchar(120) [not null]
  unit_id      int
  min_val      double
  max_val      double
  sampling_s   int          [not null, default: 10]
  created_at   timestamptz  [not null, default: `now()`]
  updated_at   timestamptz

  Indexes {
    (facility_id)
    (user_id)
    (unit_id)
    (name)
  }
}

Table actuators {
  id          int           [pk]
  facility_id int           [not null]
  name        varchar(120)  [not null]
  type        actuator_type [not null]
  range_min   double
  range_max   double
  step        double
  created_at  timestamptz   [not null, default: `now()`]
  updated_at  timestamptz

  Indexes {
    (facility_id)
    (type)
  }
}

Table sensor_actuators {
  sensor_id   int  [not null]
  actuator_id int  [not null]

  Primary key (sensor_id, actuator_id)

  Indexes {
    (sensor_id)
    (actuator_id)
  }
}

Table readings {
  sensor_id int          [not null]
  ts        timestamptz  [not null]
  value     double       [not null]

  Primary key (sensor_id, ts)

  Indexes {
    (ts)
  }
}

Table rules {
  id         int            [pk]
  user_id    int            [not null]
  name       varchar(160)   [not null]
  expr       text           [not null, note: 'Напр.: pm2_5 > 50']
  window_s   int            [not null, default: 0]
  severity   severity_level [not null, default: 'warning']
  enabled    boolean        [not null, default: true]
  created_at timestamptz    [not null, default: `now()`]
  updated_at timestamptz

  Indexes {
    (user_id)
    (enabled)
    (severity)
  }
}

Table rule_sensors{
  rule_id   int  [not null]
  sensor_id int  [not null]

  Primary key (rule_id, sensor_id)

  Indexes {
    (sensor_id)
  }
}


Table rule_commands{
  rule_id   int  [not null]
  command_id int  [not null]

  Primary key (rule_id, command_id)

  Indexes {
    (command_id)
  }
}


Table alerts {
  id          int            [pk]
  rule_id     int            [not null]
  started_at  timestamptz    [not null]
  ended_at    timestamptz
  state       alert_state    [not null, default: 'open']
  message     text
  ack_by      int            // users.id
  ack_at      timestamptz

  Indexes {
    (rule_id)
    (state)
    (started_at)
  }
}

Table commands {
  id           int            [pk]
  actuator_id  int            [not null]
  name         varchar(32)    [not null]
  created_by   int            // users.id
  created_at   timestamptz    [not null, default: `now()`]
  commands_args     text
  status       command_status [not null, default: 'free']

  Indexes {
    (actuator_id)
    (created_at)
    (status)
  }
}


Ref: sensors.user_id       > users.id
Ref: sensors.facility_id   > facilities.id
Ref: sensors.unit_id       > units.id

Ref: actuators.facility_id > facilities.id

Ref: sensor_actuators.sensor_id   > sensors.id [delete: cascade]
Ref: sensor_actuators.actuator_id > actuators.id [delete: cascade]

Ref: commands.actuator_id  > actuators.id
Ref: commands.created_by    > users.id

Ref: readings.sensor_id    > sensors.id

Ref: rules.user_id         > users.id
Ref: rule_sensors.rule_id  > rules.id
Ref: rule_sensors.sensor_id> sensors.id
Ref: rule_commands.rule_id  > rules.id
Ref: rule_commands.command_id > commands.id

Ref: alerts.rule_id        > rules.id
Ref: alerts.ack_by         > users.id